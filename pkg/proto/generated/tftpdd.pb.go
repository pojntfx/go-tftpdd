// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tftpdd.proto

package TFTPDD

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TFTPD struct {
	Device               string   `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
	Port                 int64    `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	PXEPackageURL        string   `protobuf:"bytes,3,opt,name=PXEPackageURL,proto3" json:"PXEPackageURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TFTPD) Reset()         { *m = TFTPD{} }
func (m *TFTPD) String() string { return proto.CompactTextString(m) }
func (*TFTPD) ProtoMessage()    {}
func (*TFTPD) Descriptor() ([]byte, []int) {
	return fileDescriptor_e89185584b3bfa22, []int{0}
}

func (m *TFTPD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFTPD.Unmarshal(m, b)
}
func (m *TFTPD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFTPD.Marshal(b, m, deterministic)
}
func (m *TFTPD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFTPD.Merge(m, src)
}
func (m *TFTPD) XXX_Size() int {
	return xxx_messageInfo_TFTPD.Size(m)
}
func (m *TFTPD) XXX_DiscardUnknown() {
	xxx_messageInfo_TFTPD.DiscardUnknown(m)
}

var xxx_messageInfo_TFTPD proto.InternalMessageInfo

func (m *TFTPD) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *TFTPD) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *TFTPD) GetPXEPackageURL() string {
	if m != nil {
		return m.PXEPackageURL
	}
	return ""
}

type TFTPDManaged struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ListenAddress        string   `protobuf:"bytes,2,opt,name=ListenAddress,proto3" json:"ListenAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TFTPDManaged) Reset()         { *m = TFTPDManaged{} }
func (m *TFTPDManaged) String() string { return proto.CompactTextString(m) }
func (*TFTPDManaged) ProtoMessage()    {}
func (*TFTPDManaged) Descriptor() ([]byte, []int) {
	return fileDescriptor_e89185584b3bfa22, []int{1}
}

func (m *TFTPDManaged) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFTPDManaged.Unmarshal(m, b)
}
func (m *TFTPDManaged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFTPDManaged.Marshal(b, m, deterministic)
}
func (m *TFTPDManaged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFTPDManaged.Merge(m, src)
}
func (m *TFTPDManaged) XXX_Size() int {
	return xxx_messageInfo_TFTPDManaged.Size(m)
}
func (m *TFTPDManaged) XXX_DiscardUnknown() {
	xxx_messageInfo_TFTPDManaged.DiscardUnknown(m)
}

var xxx_messageInfo_TFTPDManaged proto.InternalMessageInfo

func (m *TFTPDManaged) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TFTPDManaged) GetListenAddress() string {
	if m != nil {
		return m.ListenAddress
	}
	return ""
}

type TFTPDManagerListArgs struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TFTPDManagerListArgs) Reset()         { *m = TFTPDManagerListArgs{} }
func (m *TFTPDManagerListArgs) String() string { return proto.CompactTextString(m) }
func (*TFTPDManagerListArgs) ProtoMessage()    {}
func (*TFTPDManagerListArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_e89185584b3bfa22, []int{2}
}

func (m *TFTPDManagerListArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFTPDManagerListArgs.Unmarshal(m, b)
}
func (m *TFTPDManagerListArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFTPDManagerListArgs.Marshal(b, m, deterministic)
}
func (m *TFTPDManagerListArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFTPDManagerListArgs.Merge(m, src)
}
func (m *TFTPDManagerListArgs) XXX_Size() int {
	return xxx_messageInfo_TFTPDManagerListArgs.Size(m)
}
func (m *TFTPDManagerListArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_TFTPDManagerListArgs.DiscardUnknown(m)
}

var xxx_messageInfo_TFTPDManagerListArgs proto.InternalMessageInfo

type TFTPDId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TFTPDId) Reset()         { *m = TFTPDId{} }
func (m *TFTPDId) String() string { return proto.CompactTextString(m) }
func (*TFTPDId) ProtoMessage()    {}
func (*TFTPDId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e89185584b3bfa22, []int{3}
}

func (m *TFTPDId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFTPDId.Unmarshal(m, b)
}
func (m *TFTPDId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFTPDId.Marshal(b, m, deterministic)
}
func (m *TFTPDId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFTPDId.Merge(m, src)
}
func (m *TFTPDId) XXX_Size() int {
	return xxx_messageInfo_TFTPDId.Size(m)
}
func (m *TFTPDId) XXX_DiscardUnknown() {
	xxx_messageInfo_TFTPDId.DiscardUnknown(m)
}

var xxx_messageInfo_TFTPDId proto.InternalMessageInfo

func (m *TFTPDId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TFTPDManagerListReply struct {
	TFTPDs               []*TFTPDManaged `protobuf:"bytes,1,rep,name=TFTPDs,proto3" json:"TFTPDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TFTPDManagerListReply) Reset()         { *m = TFTPDManagerListReply{} }
func (m *TFTPDManagerListReply) String() string { return proto.CompactTextString(m) }
func (*TFTPDManagerListReply) ProtoMessage()    {}
func (*TFTPDManagerListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e89185584b3bfa22, []int{4}
}

func (m *TFTPDManagerListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFTPDManagerListReply.Unmarshal(m, b)
}
func (m *TFTPDManagerListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFTPDManagerListReply.Marshal(b, m, deterministic)
}
func (m *TFTPDManagerListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFTPDManagerListReply.Merge(m, src)
}
func (m *TFTPDManagerListReply) XXX_Size() int {
	return xxx_messageInfo_TFTPDManagerListReply.Size(m)
}
func (m *TFTPDManagerListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TFTPDManagerListReply.DiscardUnknown(m)
}

var xxx_messageInfo_TFTPDManagerListReply proto.InternalMessageInfo

func (m *TFTPDManagerListReply) GetTFTPDs() []*TFTPDManaged {
	if m != nil {
		return m.TFTPDs
	}
	return nil
}

func init() {
	proto.RegisterType((*TFTPD)(nil), "TFTPDD.TFTPD")
	proto.RegisterType((*TFTPDManaged)(nil), "TFTPDD.TFTPDManaged")
	proto.RegisterType((*TFTPDManagerListArgs)(nil), "TFTPDD.TFTPDManagerListArgs")
	proto.RegisterType((*TFTPDId)(nil), "TFTPDD.TFTPDId")
	proto.RegisterType((*TFTPDManagerListReply)(nil), "TFTPDD.TFTPDManagerListReply")
}

func init() {
	proto.RegisterFile("tftpdd.proto", fileDescriptor_e89185584b3bfa22)
}

var fileDescriptor_e89185584b3bfa22 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdd, 0x4a, 0xfb, 0x40,
	0x10, 0xc5, 0xf3, 0xd1, 0x7f, 0xfe, 0x74, 0x6c, 0x14, 0x86, 0x5a, 0x62, 0x50, 0x08, 0x8b, 0x17,
	0x41, 0x24, 0x17, 0xf5, 0x09, 0x8a, 0x89, 0x12, 0xa8, 0x10, 0x96, 0x0a, 0x7a, 0x19, 0xbb, 0x63,
	0x28, 0x96, 0x26, 0x6c, 0x16, 0xc1, 0xb7, 0xf5, 0x51, 0x24, 0x9b, 0x20, 0x4d, 0x53, 0xef, 0xe6,
	0x23, 0xe7, 0x77, 0xce, 0x84, 0x85, 0x89, 0x7a, 0x57, 0x95, 0x10, 0x51, 0x25, 0x4b, 0x55, 0xa2,
	0xb3, 0x7a, 0x58, 0x65, 0x71, 0xcc, 0x5e, 0xe1, 0x9f, 0xae, 0x70, 0x06, 0x4e, 0x4c, 0x9f, 0x9b,
	0x35, 0x79, 0x66, 0x60, 0x86, 0x63, 0xde, 0x75, 0x88, 0x30, 0xca, 0x4a, 0xa9, 0x3c, 0x2b, 0x30,
	0x43, 0x9b, 0xeb, 0x1a, 0xaf, 0xc1, 0xcd, 0x5e, 0x92, 0x2c, 0x5f, 0x7f, 0xe4, 0x05, 0x3d, 0xf3,
	0xa5, 0x67, 0x6b, 0x49, 0x7f, 0xc8, 0x62, 0x98, 0x68, 0xf4, 0x53, 0xbe, 0xcb, 0x0b, 0x12, 0x78,
	0x0a, 0x56, 0x2a, 0x3a, 0xba, 0x95, 0x8a, 0x86, 0xb2, 0xdc, 0xd4, 0x8a, 0x76, 0x0b, 0x21, 0x24,
	0xd5, 0xb5, 0xb6, 0x18, 0xf3, 0xfe, 0x90, 0xcd, 0x60, 0xba, 0x47, 0x91, 0xcd, 0x72, 0x21, 0x8b,
	0x9a, 0x5d, 0xc0, 0x7f, 0x3d, 0x4f, 0x07, 0x60, 0x96, 0xc0, 0xf9, 0xa1, 0x84, 0x53, 0xb5, 0xfd,
	0xc2, 0x5b, 0x68, 0xcf, 0xae, 0x3d, 0x33, 0xb0, 0xc3, 0x93, 0xf9, 0x34, 0x6a, 0xff, 0x42, 0xb4,
	0x9f, 0x93, 0x77, 0xdf, 0xcc, 0xbf, 0x4d, 0x70, 0xdb, 0x7d, 0x07, 0xc2, 0x1b, 0x70, 0xee, 0x25,
	0xe5, 0x8a, 0xd0, 0xed, 0x29, 0xfd, 0xb3, 0x5e, 0x9b, 0x0a, 0x66, 0x60, 0x02, 0xa3, 0xc6, 0x18,
	0x2f, 0x8f, 0x78, 0xfc, 0x5e, 0xe1, 0x5f, 0xfd, 0xb5, 0xd5, 0x81, 0x99, 0x81, 0x11, 0xd8, 0x8f,
	0xa4, 0xf0, 0xd0, 0xc0, 0x3f, 0x1a, 0x9d, 0x19, 0xcd, 0x89, 0x31, 0x6d, 0x49, 0xd1, 0x50, 0x32,
	0x0c, 0xf9, 0xe6, 0xe8, 0xc7, 0x70, 0xf7, 0x13, 0x00, 0x00, 0xff, 0xff, 0x47, 0x14, 0xa3, 0x7f,
	0x1c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TFTPDDManagerClient is the client API for TFTPDDManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TFTPDDManagerClient interface {
	Create(ctx context.Context, in *TFTPD, opts ...grpc.CallOption) (*TFTPDId, error)
	List(ctx context.Context, in *TFTPDManagerListArgs, opts ...grpc.CallOption) (*TFTPDManagerListReply, error)
	Get(ctx context.Context, in *TFTPDId, opts ...grpc.CallOption) (*TFTPDManaged, error)
	Delete(ctx context.Context, in *TFTPDId, opts ...grpc.CallOption) (*TFTPDId, error)
}

type tFTPDDManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTFTPDDManagerClient(cc grpc.ClientConnInterface) TFTPDDManagerClient {
	return &tFTPDDManagerClient{cc}
}

func (c *tFTPDDManagerClient) Create(ctx context.Context, in *TFTPD, opts ...grpc.CallOption) (*TFTPDId, error) {
	out := new(TFTPDId)
	err := c.cc.Invoke(ctx, "/TFTPDD.TFTPDDManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFTPDDManagerClient) List(ctx context.Context, in *TFTPDManagerListArgs, opts ...grpc.CallOption) (*TFTPDManagerListReply, error) {
	out := new(TFTPDManagerListReply)
	err := c.cc.Invoke(ctx, "/TFTPDD.TFTPDDManager/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFTPDDManagerClient) Get(ctx context.Context, in *TFTPDId, opts ...grpc.CallOption) (*TFTPDManaged, error) {
	out := new(TFTPDManaged)
	err := c.cc.Invoke(ctx, "/TFTPDD.TFTPDDManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFTPDDManagerClient) Delete(ctx context.Context, in *TFTPDId, opts ...grpc.CallOption) (*TFTPDId, error) {
	out := new(TFTPDId)
	err := c.cc.Invoke(ctx, "/TFTPDD.TFTPDDManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TFTPDDManagerServer is the server API for TFTPDDManager service.
type TFTPDDManagerServer interface {
	Create(context.Context, *TFTPD) (*TFTPDId, error)
	List(context.Context, *TFTPDManagerListArgs) (*TFTPDManagerListReply, error)
	Get(context.Context, *TFTPDId) (*TFTPDManaged, error)
	Delete(context.Context, *TFTPDId) (*TFTPDId, error)
}

// UnimplementedTFTPDDManagerServer can be embedded to have forward compatible implementations.
type UnimplementedTFTPDDManagerServer struct {
}

func (*UnimplementedTFTPDDManagerServer) Create(ctx context.Context, req *TFTPD) (*TFTPDId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedTFTPDDManagerServer) List(ctx context.Context, req *TFTPDManagerListArgs) (*TFTPDManagerListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedTFTPDDManagerServer) Get(ctx context.Context, req *TFTPDId) (*TFTPDManaged, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTFTPDDManagerServer) Delete(ctx context.Context, req *TFTPDId) (*TFTPDId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterTFTPDDManagerServer(s *grpc.Server, srv TFTPDDManagerServer) {
	s.RegisterService(&_TFTPDDManager_serviceDesc, srv)
}

func _TFTPDDManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TFTPD)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFTPDDManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TFTPDD.TFTPDDManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFTPDDManagerServer).Create(ctx, req.(*TFTPD))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFTPDDManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TFTPDManagerListArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFTPDDManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TFTPDD.TFTPDDManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFTPDDManagerServer).List(ctx, req.(*TFTPDManagerListArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFTPDDManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TFTPDId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFTPDDManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TFTPDD.TFTPDDManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFTPDDManagerServer).Get(ctx, req.(*TFTPDId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFTPDDManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TFTPDId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFTPDDManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TFTPDD.TFTPDDManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFTPDDManagerServer).Delete(ctx, req.(*TFTPDId))
	}
	return interceptor(ctx, in, info, handler)
}

var _TFTPDDManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TFTPDD.TFTPDDManager",
	HandlerType: (*TFTPDDManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TFTPDDManager_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TFTPDDManager_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TFTPDDManager_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TFTPDDManager_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tftpdd.proto",
}
